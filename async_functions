

async function delay(milliseconds) {
  return new Promise((resolve) => setTimeout(resolve, milliseconds));
}

async function MessageAfterDelay(message ,delayTime) {
  
  await delay(delayTime);

  console.log(message);
}
MessageAfterDelay("Goodmorning", 5000); 




async function getUserData(id) {

  return new Promise((resolve) => setTimeout(() => resolve(`${id}`), 500));
}

const userIds = ['01','02','03','04','05'];


async function fetchUserData(userIds) {
  for (const id of userIds) {
    const userData = await getUserData(id);
    console.log(userData);
  }
}

fetchUserData(userIds).then(() => console.log('All user data has been fetched'));



async function performTask() {
 
  return new Promise((resolve, reject) => {
    const success = Math.random() > 0.5; 
    if (success) {
      resolve('Task  has been completed!');
    } else {
      reject(new Error('An error occurred'));
    }
  });
}


function handlePerformTask() {
  performTask()
   .then((message) => {
      console.log(message); 
    })
   .catch((error) => {
      console.error(error.message); 
    });
}


handlePerformTask();


async function performTask() {
  try {
    const result = await performTask();
    console.log('Task completed successfully:', result);
  } catch (error) {
    console.error('An error occurred:', error);
  }
}

performTask();


async function unstableTask(taskName, retries, failureProbability) {
  let success = false;
  let failureMessage = 'You have failed try again ';

  for (let i = 0; i < retries; i++) {
      try {
          const result = await unstableTask(taskName,retries, failureProbability);
          console.log(`Attempt ${i + 1}: ${result}`);
          success = true;
          break; 
      } catch (error) {
          console.log(`Attempt ${i + 1}: ${error}`);
          failureMessage = error;
      }
  }

  if (success) {
      console.log(`${taskName} succeeded`);
  } else {
      console.log(`${taskName} failed after ${retries} attempts. ${failureMessage}`);
  }
}
unstableTask("SampleTask", 3, 0.5);


